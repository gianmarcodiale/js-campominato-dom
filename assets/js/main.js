/* 
CONSEGNA
L'utente indica un livello di difficoltà in base al quale viene generata una griglia di gioco quadrata, in cui ogni cella contiene un numero tra quelli compresi in un range:
- con difficoltà 1 => tra 1 e 100
- con difficoltà 2 => tra 1 e 81
- con difficoltà 3 => tra 1 e 49
Quando l'utente clicca su ogni cella, la cella cliccata si colora di azzurro.
*/

//creo la funzione per creare le celle.
/**
 * ## Generate a grid based on the chosed arguments
 * @param {string} selector select an element from DOM
 * @param {number} limit set a number limit for the iteration
 * @param {string} tagName select a tag name that will be created inside the selected element
 * @param {string} className select a class name to add to the created element
 */
function generateGrid(selector, limit, tagName, className) {
    const cellsElement = document.querySelector(selector);
    cellsElement.innerHTML = "";

    for (index = 0; index < limit; index++ ) {
        const cellItem = document.createElement(tagName);
        cellItem.classList.add(className);
        cellsElement.append(cellItem);
    };
};

//creo la funzione per generare i numeri
function getRandInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

//creo la funzione per generare i numeri che andranno a riempire le celle.
/**
 * ## Generate an array of ordered numbers
 * @param {number} limit set a limit to the array inside the function
 * @returns {array} - returns an array of numbers sorted in crescent order
 */
function generateCellNumbers(limit) {
    const numbers = [];

    while (numbers.length !== limit) {
        const number = getRandInteger(1, limit);

        if (!numbers.includes(number)) {
            numbers.push(number);
        };
    };
    return numbers.sort(function(a, b) {
        return a - b;
    });
};

//creo la funzione per cambiare colore al click
/**
 * ## Generate a click function to the selected elements
 * @param {string} selector select an element from the DOM that you want to iterate n-times
 * @param {number} limit set a limit to the numbers generated by the iteration
 */
function selectElements (selector, limit) {
    const cells = document.querySelectorAll(selector);
    const numbers = generateCellNumbers(limit);

    for (let i = 0; i < cells.length; i++) {
        const cell = cells[i];
        const spanElement = document.createElement("span");
        spanElement.append(numbers[i]);
        cell.append(spanElement);

        cell.addEventListener("click", function() {
            this.classList.add("active");
        })
    };
}

//creo la condizione per far comparire le griglie in base al livello di difficoltà.
document.querySelector("form").addEventListener("submit", function(event) {
    event.preventDefault();
    let difficultyLevel = document.getElementById("difficulty").value;

    if (difficultyLevel == "easy") {
        generateGrid(".cells", 100, "div", "cell_100");
        generateCellNumbers(100);
        selectElements(".cell_100", 100);
    } else if (difficultyLevel == "medium") {
        generateGrid(".cells", 81, "div", "cell_81");
        generateCellNumbers(81);
        selectElements(".cell_81", 81);
    } else {
        generateGrid(".cells", 49, "div", "cell_49");
        generateCellNumbers(49);
        selectElements(".cell_49", 49);
    };
});


/* 
CONSEGNA 2
Il computer deve generare 16 numeri casuali nello stesso range della difficoltà prescelta: le bombe.
I numeri nella lista delle bombe non possono essere duplicati.
In seguito l'utente clicca su una cella:
- se il numero è presente nella lista dei numeri generati - abbiamo calpestato una bomba
- la cella si colora di rosso e la partita termina,
- altrimenti la cella cliccata si colora di azzurro e l'utente può continuare a cliccare sulle altre celle.
La partita termina quando:
- il giocatore clicca su una bomba
- o raggiunge il numero massimo possibile di numeri consentiti.
Al termine della partita il software deve comunicare il punteggio, cioè il numero di volte che l’utente ha cliccato su una cella che non era una bomba.

BONUS: 1
- quando si clicca su una bomba e finisce la partita, evitare che si possa cliccare su altre celle
- quando si clicca su una bomba e finisce la partita, il software scopre tutte le bombe nascoste
*/

let bombList = []

function generateBombs(min, max) {

    for (let index = 0; index < 16; index++) {
        let bombGen = Math.floor(Math.random() * (max - min + 1)) + min;

        if (bombList.includes(bombGen)) {
            let newNumber = Math.floor(Math.random() * (max - min + 1)) + min;
            bombList.push(bombGen);
        } else {
            bombList.push(bombGen);
        }
    }
    //console.log(bombList);

    
}